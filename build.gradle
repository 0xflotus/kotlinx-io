buildscript {
    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        }
        if (kotlin_version.contains("dev")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }

        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.30"
        classpath ("org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-gradle-plugin'
        }
        classpath group: 'net.rubygrapefruit', name: 'native-platform', version: '0.10'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'kotlin-platform-common'

allprojects {
    if (project.hasProperty('releaseVersion')) {
        project.version = project.releaseVersion
    }

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'

    if (project.hasProperty("deploy")) {
        apply plugin: 'maven-publish'
        apply from: rootProject.file('bintray.gradle')
    }

    apply from: rootProject.file('pom.gradle')

    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        }
        if (kotlin_version.contains("dev")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }
        mavenCentral()
        mavenLocal()
    }

    afterEvaluate {
        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.kotlin
            duplicatesStrategy DuplicatesStrategy.EXCLUDE
            def platformSrc = sourceSets.main.allSource
            def commonSrc = project(':').sourceSets.main.allSource
            from (platformSrc + commonSrc)
        }
    }

    task emptyJar(type: Jar) {
        classifier 'javadoc'
    }

    tasks.build.dependsOn(['sourceJar', 'emptyJar'])

    if (project.hasProperty("deploy")) {
        publishing {
            publications {
                mavenProject(MavenPublication) {
                    if (components.findByName('java')) {
                        from components.java
                    }
                    groupId project.group
                    artifactId project.name
                    version project.version

                    artifact sourceJar {
                        classifier 'sources'
                    }

                    artifact emptyJar {
                        classifier 'javadoc'
                    }

                    //if (project.name == 'kotlinx-io-native') {
                    //    artifact (new File(project.buildDir, "konan/libs/linux_x64/native.klib")) {
                    //        classifier 'linux_x64'
                    //    }
                    //}

                    withPom(pom)
                }
            }
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
}

afterReleaseBuild.dependsOn bintrayUpload
